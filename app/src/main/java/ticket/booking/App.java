/*
 * This source file was generated by the Gradle 'init' task
 */
package ticket.booking;

import ticket.booking.entities.User;
import ticket.booking.entities.Ticket;
import ticket.booking.entities.Train;
import ticket.booking.services.TrainServiceImpl;
import ticket.booking.services.UserServiceImpl;
import ticket.booking.services.TicketServiceImpl;
import ticket.booking.interfaces.TrainService;
import ticket.booking.interfaces.UserService;
import ticket.booking.interfaces.TicketService;
import ticket.booking.utils.UserServiceUtil;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * Main application class for the Ticket Booking System
 * Provides a comprehensive CLI interface for train booking operations
 */
public class App {
    
    private static UserService userService;
    private static TrainService trainService;
    private static TicketService ticketService;
    private static User currentUser;
    private static Scanner scanner;
    
    public static void main(String[] args) {
        initializeServices();
        scanner = new Scanner(System.in);
        
        System.out.println("🚆 Welcome to the Train Ticket Booking System! 🚆");
        System.out.println("==================================================");
        
        while (true) {
            if (currentUser == null) {
                showMainMenu();
            } else {
                showUserMenu();
            }
        }
    }
    
    private static void initializeServices() {
        try {
            userService = new UserServiceImpl();
            trainService = new TrainServiceImpl();
            ticketService = new TicketServiceImpl();
        } catch (Exception e) {
            System.err.println("Error initializing services: " + e.getMessage());
            System.exit(1);
        }
    }
    
    private static void showMainMenu() {
        System.out.println("\n📋 Main Menu:");
        System.out.println("1. 🔐 Login");
        System.out.println("2. 📝 Register");
        System.out.println("3. 🔍 Search Trains");
        System.out.println("4. 📊 View All Trains");
        System.out.println("5. ❌ Exit");
        System.out.print("Select an option: ");
        
        int choice = getIntInput();
        
        switch (choice) {
            case 1:
                loginUser();
                break;
            case 2:
                registerUser();
                break;
            case 3:
                searchTrains();
                break;
            case 4:
                viewAllTrains();
                break;
            case 5:
                System.out.println("👋 Thank you for using the Train Ticket Booking System!");
                System.exit(0);
                break;
            default:
                System.out.println("❌ Invalid option. Please try again.");
        }
    }
    
    private static void
    showUserMenu() {
        System.out.println("\n👤 Welcome, " + currentUser.getName() + "!");
        System.out.println("📋 User Menu:");
        System.out.println("1. 🎫 Book Ticket");
        System.out.println("2. 📋 View My Tickets");
        System.out.println("3. ❌ Cancel Ticket");
        System.out.println("4. 📅 Reschedule Ticket");
        System.out.println("5. 🔍 Search Trains");
        System.out.println("6. 👤 View Profile");
        System.out.println("7. 📊 View Statistics");
        System.out.println("8. 🔐 Logout");
        System.out.println("9. ❌ Exit");
        System.out.print("Select an option: ");
        
        int choice = getIntInput();
        
        switch (choice) {
            case 1:
                bookTicket();
                break;
            case 2:
                viewMyTickets();
                break;
            case 3:
                cancelTicket();
                break;
            case 4:
                rescheduleTicket();
                break;
            case 5:
                searchTrains();
                break;
            case 6:
                viewProfile();
                break;
            case 7:
                viewStatistics();
                break;
            case 8:
                logoutUser();
                break;
            case 9:
                System.out.println("👋 Thank you for using the Train Ticket Booking System!");
                System.exit(0);
                break;
            default:
                System.out.println("❌ Invalid option. Please try again.");
        }
    }
    
    // ==================== AUTHENTICATION METHODS ====================
    
    private static void loginUser() {
        System.out.println("\n🔐 Login");
        System.out.print("Enter email: ");
        String email = scanner.nextLine();
        
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        
        User user = userService.loginUser(email, password);
        if (user != null) {
            currentUser = user;
            System.out.println("✅ Login successful! Welcome, " + user.getName() + "!");
        } else {
            System.out.println("❌ Login failed. Please check your credentials.");
        }
    }
    
    private static void registerUser() {
        System.out.println("\n📝 User Registration");
        
        System.out.print("Enter name: ");
        String name = scanner.nextLine();
        
        System.out.print("Enter email: ");
        String email = scanner.nextLine();
        
        if (userService.isEmailRegistered(email)) {
            System.out.println("❌ Email already registered. Please use a different email.");
            return;
        }
        
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        
        if (!UserServiceUtil.isValidPassword(password)) {
            System.out.println("❌ Password must be at least 6 characters long.");
            return;
        }
        
        System.out.print("Enter phone number: ");
        String phoneNumber = scanner.nextLine();
        
        // Create new user
        User newUser = new User();
        newUser.setUserId(UUID.randomUUID().toString());
        newUser.setName(name);
        newUser.setEmail(email);
        newUser.setPassword(password);
        newUser.setPhoneNumber(phoneNumber);
        newUser.setHashedPassword(UserServiceUtil.hashPassword(password));
        newUser.setBookedTickets(new ArrayList<>());
        
        if (userService.registerUser(newUser)) {
            System.out.println("✅ Registration successful! You can now login.");
        } else {
            System.out.println("❌ Registration failed. Please try again.");
        }
    }
    
    private static void logoutUser() {
        if (userService.logoutUser(currentUser.getUserId())) {
            currentUser = null;
            System.out.println("✅ Logout successful!");
        } else {
            System.out.println("❌ Logout failed.");
        }
    }
    
    // ==================== TRAIN SEARCH METHODS ====================
    
    private static void searchTrains() {
        System.out.println("\n🔍 Search Trains");
        
        System.out.print("Enter source station: ");
        String source = scanner.nextLine();
        
        System.out.print("Enter destination station: ");
        String destination = scanner.nextLine();
        
        System.out.print("Enter date of travel (YYYY-MM-DD): ");
        String dateStr = scanner.nextLine();
        
        try {
            LocalDate date = LocalDate.parse(dateStr);
            List<Train> trains = trainService.searchTrains(source, destination, date);
            
            if (trains.isEmpty()) {
                System.out.println("❌ No trains found for the specified route and date.");
            } else {
                System.out.println("\n🚆 Available Trains:");
                System.out.println("====================");
                for (int i = 0; i < trains.size(); i++) {
                    Train train = trains.get(i);
                    System.out.printf("%d. %s (%s) - %s to %s\n", 
                        i + 1, train.getTrainName(), train.getTrainNumber(),
                        train.getSource(), train.getDestination());
                    System.out.printf("   Departure: %s, Arrival: %s, Price: $%.2f\n",
                        train.getDepartureTime(), train.getArrivalTime(), train.getBasePrice());
                    System.out.printf("   Available Seats: %d\n", train.getAvailableSeats());
                    System.out.println();
                }
                
                if (currentUser != null) {
                    System.out.print("Enter train number to book (or 0 to go back): ");
                    int trainChoice = getIntInput();
                    if (trainChoice > 0 && trainChoice <= trains.size()) {
                        bookSpecificTrain(trains.get(trainChoice - 1));
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("❌ Invalid date format. Please use YYYY-MM-DD.");
        }
    }
    
    private static void viewAllTrains() {
        System.out.println("\n📊 All Available Trains");
        System.out.println("=======================");
        
        List<Train> trains = trainService.getAllTrains();
        if (trains.isEmpty()) {
            System.out.println("❌ No trains available.");
        } else {
            for (int i = 0; i < trains.size(); i++) {
                Train train = trains.get(i);
                System.out.printf("%d. %s (%s)\n", i + 1, train.getTrainName(), train.getTrainNumber());
                System.out.printf("   Route: %s to %s\n", train.getSource(), train.getDestination());
                System.out.printf("   Time: %s - %s\n", train.getDepartureTime(), train.getArrivalTime());
                System.out.printf("   Type: %s, Available Seats: %d\n", train.getTrainType(), train.getAvailableSeats());
                System.out.println();
            }
        }
    }
    
    // ==================== BOOKING METHODS ====================
    
    private static void bookTicket() {
        System.out.println("\n🎫 Book Ticket");
        
        // Show available trains
        List<Train> trains = trainService.getAllTrains();
        if (trains.isEmpty()) {
            System.out.println("❌ No trains available for booking.");
            return;
        }
        
        System.out.println("Available Trains:");
        for (int i = 0; i < trains.size(); i++) {
            Train train = trains.get(i);
            System.out.printf("%d. %s (%s) - %s to %s\n", 
                i + 1, train.getTrainName(), train.getTrainNumber(),
                train.getSource(), train.getDestination());
        }
        
        System.out.print("Select train number: ");
        int trainChoice = getIntInput();
        
        if (trainChoice > 0 && trainChoice <= trains.size()) {
            bookSpecificTrain(trains.get(trainChoice - 1));
        } else {
            System.out.println("❌ Invalid train selection.");
        }
    }
    
    private static void bookSpecificTrain(Train train) {
        System.out.println("\n🎫 Booking Ticket for " + train.getTrainName());
        
        System.out.print("Enter date of travel (YYYY-MM-DD): ");
        String dateStr = scanner.nextLine();
        
        try {
            LocalDate journeyDate = LocalDate.parse(dateStr);
            
            System.out.print("Enter seat type (WINDOW/AISLE): ");
            String seatType = scanner.nextLine().toUpperCase();
            
            System.out.print("Enter payment method (CREDIT_CARD/DEBIT_CARD): ");
            String paymentMethod = scanner.nextLine().toUpperCase();
            
            // Create passenger details
            Map<String, Object> passengerDetails = new HashMap<>();
            passengerDetails.put("name", currentUser.getName());
            passengerDetails.put("email", currentUser.getEmail());
            passengerDetails.put("phone", currentUser.getPhoneNumber());
            
            // Book the ticket
            Ticket ticket = userService.bookTicket(currentUser.getUserId(), train.getTrainId(), 
                journeyDate, seatType, passengerDetails);
            
            if (ticket != null) {
                System.out.println("✅ Ticket booked successfully!");
                System.out.println("Ticket ID: " + ticket.getTicketId());
                System.out.println("Seat Number: " + ticket.getSeatNumber());
                System.out.println("Status: " + ticket.getTicketStatus());
                System.out.println("Price: $" + ticket.getPrice());
            } else {
                System.out.println("❌ Ticket booking failed. Please try again.");
            }
        } catch (Exception e) {
            System.out.println("❌ Invalid date format. Please use YYYY-MM-DD.");
        }
    }
    
    // ==================== TICKET MANAGEMENT METHODS ====================
    
    private static void viewMyTickets() {
        System.out.println("\n📋 My Tickets");
        System.out.println("=============");
        
        List<Ticket> tickets = userService.getUserTickets(currentUser.getUserId());
        if (tickets.isEmpty()) {
            System.out.println("❌ No tickets found.");
        } else {
            for (int i = 0; i < tickets.size(); i++) {
                Ticket ticket = tickets.get(i);
                System.out.printf("%d. Ticket ID: %s\n", i + 1, ticket.getTicketId());
                System.out.printf("   Route: %s to %s\n", ticket.getSource(), ticket.getDestination());
                System.out.printf("   Date: %s, Seat: %s\n", ticket.getDateOfTravel(), ticket.getSeatNumber());
                System.out.printf("   Status: %s, Price: $%.2f\n", ticket.getTicketStatus(), ticket.getPrice());
                System.out.println();
            }
        }
    }
    
    private static void cancelTicket() {
        System.out.println("\n❌ Cancel Ticket");
        
        List<Ticket> tickets = userService.getActiveTickets(currentUser.getUserId());
        if (tickets.isEmpty()) {
            System.out.println("❌ No active tickets to cancel.");
            return;
        }
        
        System.out.println("Active Tickets:");
        for (int i = 0; i < tickets.size(); i++) {
            Ticket ticket = tickets.get(i);
            System.out.printf("%d. Ticket ID: %s - %s to %s on %s\n", 
                i + 1, ticket.getTicketId(), ticket.getSource(), 
                ticket.getDestination(), ticket.getDateOfTravel());
        }
        
        System.out.print("Select ticket to cancel: ");
        int ticketChoice = getIntInput();
        
        if (ticketChoice > 0 && ticketChoice <= tickets.size()) {
            Ticket ticketToCancel = tickets.get(ticketChoice - 1);
            
            if (ticketService.canCancelTicket(ticketToCancel.getTicketId())) {
                if (ticketService.cancelTicket(ticketToCancel.getTicketId())) {
                    System.out.println("✅ Ticket cancelled successfully!");
                } else {
                    System.out.println("❌ Failed to cancel ticket.");
                }
            } else {
                System.out.println("❌ This ticket cannot be cancelled (less than 24 hours before journey).");
            }
        } else {
            System.out.println("❌ Invalid ticket selection.");
        }
    }
    
    private static void rescheduleTicket() {
        System.out.println("\n📅 Reschedule Ticket");
        
        List<Ticket> tickets = userService.getActiveTickets(currentUser.getUserId());
        if (tickets.isEmpty()) {
            System.out.println("❌ No active tickets to reschedule.");
            return;
        }
        
        System.out.println("Active Tickets:");
        for (int i = 0; i < tickets.size(); i++) {
            Ticket ticket = tickets.get(i);
            System.out.printf("%d. Ticket ID: %s - %s to %s on %s\n", 
                i + 1, ticket.getTicketId(), ticket.getSource(), 
                ticket.getDestination(), ticket.getDateOfTravel());
        }
        
        System.out.print("Select ticket to reschedule: ");
        int ticketChoice = getIntInput();
        
        if (ticketChoice > 0 && ticketChoice <= tickets.size()) {
            Ticket ticketToReschedule = tickets.get(ticketChoice - 1);
            
            if (ticketService.canRescheduleTicket(ticketToReschedule.getTicketId())) {
                System.out.print("Enter new date (YYYY-MM-DD): ");
                String newDateStr = scanner.nextLine();
                
                try {
                    LocalDate newDate = LocalDate.parse(newDateStr);
                    Ticket rescheduledTicket = ticketService.rescheduleTicket(ticketToReschedule.getTicketId(), newDate);
                    
                    if (rescheduledTicket != null) {
                        System.out.println("✅ Ticket rescheduled successfully!");
                        System.out.println("New date: " + rescheduledTicket.getDateOfTravel());
                    } else {
                        System.out.println("❌ Failed to reschedule ticket.");
                    }
                } catch (Exception e) {
                    System.out.println("❌ Invalid date format. Please use YYYY-MM-DD.");
                }
            } else {
                System.out.println("❌ This ticket cannot be rescheduled (less than 24 hours before journey).");
            }
        } else {
            System.out.println("❌ Invalid ticket selection.");
        }
    }
    
    // ==================== PROFILE AND STATISTICS METHODS ====================
    
    private static void viewProfile() {
        System.out.println("\n👤 User Profile");
        System.out.println("===============");
        
        User profile = userService.getUserProfile(currentUser.getUserId());
        if (profile != null) {
            System.out.println("Name: " + profile.getName());
            System.out.println("Email: " + profile.getEmail());
            System.out.println("Phone: " + profile.getPhoneNumber());
            System.out.println("User ID: " + profile.getUserId());
            System.out.println("Registration Date: " + profile.getRegistrationDate());
        }
    }
    
    private static void viewStatistics() {
        System.out.println("\n📊 User Statistics");
        System.out.println("==================");
        
        Map<String, Object> stats = userService.getUserStatistics(currentUser.getUserId());
        System.out.println("Total Bookings: " + stats.get("totalBookings"));
        System.out.println("Active Bookings: " + stats.get("activeBookings"));
        System.out.println("Cancelled Bookings: " + stats.get("cancelledBookings"));
        System.out.println("Total Spent: $" + stats.get("totalSpent"));
    }
    
    // ==================== UTILITY METHODS ====================
    
    private static int getIntInput() {
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.print("Please enter a valid number: ");
            }
        }
    }
}
